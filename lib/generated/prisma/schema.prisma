enum RideService {
  UBER
  OLA
}

enum RideStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MemberStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  clerkId     String       @unique
  email       String       @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  name        String
  phone       String?      @unique // optional but unique when present
  rating      Float        @default(5)
  ridesOwned  Ride[]       @relation("OwnerRides")
  memberships RideMember[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([clerkId])
}

model Ride {
  id      String @id @default(cuid())
  ownerId String
  owner   User   @relation("OwnerRides", fields: [ownerId], references: [id], onDelete: Cascade)

  service      RideService
  shareUrlHash String?     @unique // dedupe trip links when provided
  shareUrlEnc  String? // encrypted; reveal only to accepted members

  fromText    String
  toText      String
  fromLat     Float
  fromLng     Float
  toLat       Float
  toLng       Float
  departureAt DateTime

  seatsTotal     Int
  seatsAvailable Int

  estTotalFare Int // paise (₹421.99 => 42199)
  perSeatPrice Int // paise; snapshot for display

  isVerified Boolean    @default(false)
  status     RideStatus @default(ACTIVE)

  members   RideMember[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // indexes for common queries
  @@index([status, departureAt])
  @@index([ownerId])
  @@index([departureAt])
  @@index([fromLat, fromLng])
  @@index([toLat, toLng])
}

model RideMember {
  id     String @id @default(cuid())
  rideId String
  ride   Ride   @relation(fields: [rideId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  status    MemberStatus @default(PENDING)
  fareShare Int // paise; snapshot of this member's share

  createdAt DateTime @default(now())

  @@unique([rideId, userId]) // user can’t join same ride twice
  @@index([userId, status]) // “my requests” lists
}
