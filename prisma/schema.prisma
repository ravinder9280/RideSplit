// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
        
// Enums
enum RideService {
  UBER
  OLA
}

enum RideStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MemberStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

// Models
model User {
  id         String  @id @default(cuid())
  clerkId    String  @unique
  email      String? @unique
  phone      String? @unique
  name       String?
  firstName  String?
  lastName   String?
  imageUrl   String?
  rating     Int     @default(5)

  rides      Ride[]  @relation("UserRides")
  memberships RideMember[]

  @@index([clerkId])
}

model Ride {
  id              String       @id @default(cuid())
  ownerId         String
  owner           User         @relation("UserRides", fields: [ownerId], references: [id], onDelete: Cascade)

  fromText        String
  toText          String
  fromLat         Float
  fromLng         Float
  toLat           Float
  toLng           Float

  departureAt     DateTime
  seatsTotal      Int
  seatsAvailable  Int

  estTotalFare    Int
  perSeatPrice    Int

  service         RideService

  shareUrlEnc     String?
  shareUrlHash    String? @unique

  status          RideStatus @default(ACTIVE)
  isVerified      Boolean    @default(false)

  members         RideMember[]

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([status, departureAt])
  @@index([ownerId])
  @@index([fromLat, fromLng])
  @@index([toLat, toLng])
}

model RideMember {
  id         String       @id @default(cuid())
  rideId     String
  userId     String

  ride       Ride         @relation(fields: [rideId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  status     MemberStatus @default(PENDING)
  fareShare  Int

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@unique([rideId, userId])
  @@index([userId])
}
